"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _ReactNativeMaps = _interopRequireWildcard(require("./ReactNativeMaps"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// Dynamically import from ./ReactNativeMaps so that we don't
// require react-native-maps unless we're in native.

// Approximates a conversion of zoom level to altitude,
// since different platforms require different values.
// https://stackoverflow.com/a/37142662
function zoomToAltitude(zoom) {
  const A = 40487.57;
  const B = 0.00007096758;
  const C = 91610.74;
  const D = -40467.74;
  return C * Math.pow((A - D) / (zoom - D) - 1, 1 / B);
}
class MapView extends React.Component {
  constructor(props) {
    super(props);
    _defineProperty(this, "mapRef", void 0);
    this.state = {};
    this.mapRef = /*#__PURE__*/React.createRef();
  }
  componentDidUpdate(prevProps) {
    if (prevProps.latitude != null && prevProps.longitude != null && this.props.latitude != null && this.props.longitude != null && (prevProps.latitude !== this.props.latitude || prevProps.longitude !== this.props.longitude)) {
      this.animateToLocation({
        latitude: this.props.latitude,
        longitude: this.props.longitude,
        zoom: this.props.zoom
      });
    }
  }
  animateToLocation(_ref) {
    let {
      latitude,
      longitude,
      zoom
    } = _ref;
    const args = {
      center: {
        latitude,
        longitude
      }
    };
    if (zoom) {
      args.altitude = zoomToAltitude(zoom || 1);
      args.zoom = zoom;
    }
    this.mapRef.current.animateCamera(args);
  }
  render() {
    const {
      provider,
      latitude,
      longitude,
      zoom,
      showsCompass = false,
      rotateEnabled = true,
      zoomEnabled = true,
      loadingEnabled = true,
      scrollEnabled = true,
      loadingBackgroundColor,
      loadingIndicatorColor,
      mapType = "standard",
      showsUserLocation,
      followsUserLocation,
      showsPointsOfInterest,
      style,
      markersData,
      renderItem,
      keyExtractor,
      children
    } = this.props;
    if (!_ReactNativeMaps.default || !_ReactNativeMaps.Marker) {
      return null;
    }
    const camera = {
      altitude: zoomToAltitude(zoom || 1),
      heading: 0,
      pitch: 0,
      zoom,
      center: {
        latitude,
        longitude
      }
    };
    return /*#__PURE__*/React.createElement(_ReactNativeMaps.default, {
      ref: this.mapRef,
      provider: provider,
      mapType: mapType,
      showsCompass: showsCompass,
      rotateEnabled: rotateEnabled,
      zoomEnabled: zoomEnabled,
      camera: camera,
      loadingEnabled: loadingEnabled,
      scrollEnabled: scrollEnabled,
      showsUserLocation: showsUserLocation,
      followsUserLocation: followsUserLocation,
      showsPointsOfInterest: showsPointsOfInterest,
      loadingBackgroundColor: loadingBackgroundColor,
      loadingIndicatorColor: loadingIndicatorColor,
      style: style
    }, markersData && renderItem ? markersData.map((item, index) => {
      const component = renderItem({
        item,
        index
      });
      if (!component) {
        return null;
      }
      const key = keyExtractor ? keyExtractor(item, index) : index;
      return /*#__PURE__*/React.cloneElement(component, {
        key
      });
    }) : children);
  }
}
var _default = MapView;
exports.default = _default;