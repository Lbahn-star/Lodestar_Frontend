function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import * as React from "react";
import { Text as NativeText, I18nManager } from "react-native";
import { withTheme } from "../theming";
class Text extends React.Component {
  constructor() {
    super(...arguments);
    _defineProperty(this, "_root", void 0);
    _defineProperty(this, "state", {
      nativeProps: {}
    });
  }
  setNativeProps(args) {
    this.state.nativeProps = args || {};
  }
  render() {
    const {
      style,
      ...rest
    } = this.props;
    const writingDirection = I18nManager.isRTL ? "rtl" : "ltr";
    return /*#__PURE__*/React.createElement(NativeText, _extends({}, rest, this.state.nativeProps, {
      ref: c => {
        this._root = c;
      },
      style: [{
        textAlign: "left",
        writingDirection
      }, style]
    }));
  }
}
export const BaseLink = _ref => {
  let {
    style,
    theme,
    title,
    ...props
  } = _ref;
  return /*#__PURE__*/React.createElement(Text, _extends({
    hitSlop: 8,
    style: [{
      color: theme.colors.primary
    }, style],
    theme: theme
  }, props), title);
};
const Link = withTheme(BaseLink);
export { Link };
export default withTheme(Text);