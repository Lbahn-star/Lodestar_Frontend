"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _ReactGoogleMaps = require("./ReactGoogleMaps");
var _NoApiKey = _interopRequireDefault(require("./NoApiKey"));
var _reactNative = require("react-native");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
class MapView extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      lat: props.latitude || 0,
      lng: props.longitude || 0,
      zoom: props.zoom
    };
  }
  componentDidMount() {
    (async () => {
      if (!this.props.showsUserLocation) {
        return;
      }
      if ("geolocation" in navigator) {
        navigator.geolocation.getCurrentPosition(position => {
          const {
            coords
          } = position;
          this.setState({
            userLocation: coords
          });
          if (this.props.followsUserLocation) {
            this.setState({
              lat: coords.latitude,
              lng: coords.longitude
            });
          }
        });
      }
    })();
  }
  componentDidUpdate(prevProps) {
    if (prevProps.latitude != null && prevProps.longitude != null && this.props.latitude != null && this.props.longitude != null && (prevProps.latitude !== this.props.latitude || prevProps.longitude !== this.props.longitude)) {
      // eslint-disable-next-line react/no-did-update-set-state
      this.setState({
        lat: this.props.latitude,
        lng: this.props.longitude,
        zoom: this.props.zoom
      });
    }
  }
  animateToLocation(_ref) {
    let {
      latitude,
      longitude,
      zoom
    } = _ref;
    const args = {
      lat: latitude,
      lng: longitude
    };
    if (zoom) {
      args.zoom = zoom;
    }
    this.setState(args);
  }
  render() {
    const {
      apiKey,
      rotateEnabled = true,
      scrollEnabled = true,
      mapType = "standard",
      style,
      markersData,
      renderItem,
      keyExtractor,
      children
    } = this.props;
    const {
      lat,
      lng,
      userLocation,
      zoom
    } = this.state;
    if (!_ReactGoogleMaps.LoadScript || !_ReactGoogleMaps.GoogleMap || !_ReactGoogleMaps.Marker) {
      return null;
    }
    if (!apiKey) {
      return /*#__PURE__*/React.createElement(_NoApiKey.default, null);
    }
    return /*#__PURE__*/React.createElement(_ReactGoogleMaps.LoadScript, {
      googleMapsApiKey: apiKey
    }, /*#__PURE__*/React.createElement(_ReactGoogleMaps.GoogleMap, {
      mapContainerStyle: _reactNative.StyleSheet.flatten(style),
      center: {
        lat,
        lng
      },
      mapTypeId: mapType,
      zoom: zoom,
      options: {
        scrollwheel: scrollEnabled,
        rotateControl: rotateEnabled
      }
    }, userLocation ? /*#__PURE__*/React.createElement(_ReactGoogleMaps.Marker, {
      title: "Your Location",
      position: {
        lat: userLocation.latitude,
        lng: userLocation.longitude
      },
      icon: {
        path: "M12,20a8,8 0 1,0 16,0a8,8 0 1,0 -16,0",
        fillColor: "#387af4",
        fillOpacity: 1,
        strokeColor: "#fff",
        strokeWidth: 4,
        strokeOpacity: 1
      }
    }) : null, markersData && renderItem ? markersData.map((item, index) => {
      const component = renderItem({
        item,
        index
      });
      if (!component) {
        return null;
      }
      const key = keyExtractor ? keyExtractor(item, index) : index;
      return /*#__PURE__*/React.cloneElement(component, {
        key
      });
    }) : children));
  }
}
var _default = MapView;
exports.default = _default;